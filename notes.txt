  const trailLength = 5; // Length of the trail
  const updateInterval = 10; // Save point every 10 frames

  // Initialize state for trails
  const [leftKneeTrail, setLeftKneeTrail] = useState({ positions: [], show: false });
  const [rightKneeTrail, setRightKneeTrail] = useState({ positions: [], show: false });
  const [leftElbowTrail, setLeftElbowTrail] = useState({ positions: [], show: false });
  const [rightElbowTrail, setRightElbowTrail] = useState({ positions: [], show: false });
  const [leftShoulderTrail, setLeftShoulderTrail] = useState({ positions: [], show: false });
  const [rightShoulderTrail, setRightShoulderTrail] = useState({ positions: [], show: false });
  let frameCounter = useRef(0);

  let currentlyInSquat = useRef(false);

  function drawResults(poses) {
    const ctx = canvasRef.current.getContext("2d");
    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    ctx.font = "100px Roboto Condensed";

    frameCounter.current++;

    poses.forEach(pose => {
      if (frameCounter.current % updateInterval === 0) {
        // Save keypoints every nth frame
        const leftKnee = pose.keypoints[13];
        const rightKnee = pose.keypoints[14];
        const leftElbow = pose.keypoints[7];
        const rightElbow = pose.keypoints[8];
        const leftShoulder = pose.keypoints[5];
        const rightShoulder = pose.keypoints[6];

        const updateTrail = (keypoint, setTrailFunction) => {
          if (keypoint.score > 0.5) {
            setTrailFunction(currentTrail => [...currentTrail, keypoint].slice(-trailLength));
          } else {
            setTrailFunction([]); // Clear history if keypoint is not detected
          }
        };
        updateTrail(leftKnee, setLeftKneeTrail);
        updateTrail(rightKnee, setRightKneeTrail);
        updateTrail(leftElbow, setLeftElbowTrail);
        updateTrail(rightElbow, setRightElbowTrail);
        updateTrail(leftShoulder, setLeftShoulderTrail);
        updateTrail(rightShoulder, setRightShoulderTrail);
      }

      const rgbValues = colors.trailColor.match(/\d+/g); // This will extract ["255", "255", "255"]

      // Now convert these string values to numbers
      const [r, g, b] = rgbValues.map(Number);

      // Use these values in your strokeStyle with the desired opacity
      const drawTrail = (trail) => {
        for (let i = 0; i < trail.length - 1; i++) {
          const opacity = 1 - (i / trail.length);
          ctx.beginPath();
          ctx.moveTo(trail[i].x, trail[i].y);
          ctx.lineTo(trail[i + 1].x, trail[i + 1].y);
          ctx.strokeStyle = `rgba(${r}, ${g}, ${b}, ${opacity})`;
          ctx.stroke();
        }
      };
      
      if (leftKneeTrail.show) {
        drawTrail(leftKneeTrail.positions);
      }
      if (rightKneeTrail.show) {
          drawTrail(rightKneeTrail.positions);
      }
      if (leftElbowTrail.show) {
          drawTrail(leftElbowTrail.positions);
      }
      if (rightElbowTrail.show) {
        drawTrail(rightElbowTrail.positions);
      }
      if (leftShoulderTrail.show) {
        drawTrail(leftShoulderTrail.positions);
      }
      if (rightShoulderTrail.show) {
        drawTrail(rightShoulderTrail.positions);
      }
    

      if (drawSkeleton) {
        drawKeypoints(pose.keypoints, 0.5, ctx);
        drawSkeletonLines(pose.keypoints, 0.5, ctx);

        // Left Knee Angle
        const leftHip = pose.keypoints[11];
        const leftKnee = pose.keypoints[13];
        const leftAnkle = pose.keypoints[15];
        if (leftHip.score > 0.5 && leftKnee.score > 0.5 && leftAnkle.score > 0.5) {
          const angleLeftKnee = calculateAngle(leftHip, leftKnee, leftAnkle);
          if (showLeftKneeAngle) {
            ctx.fillText(` ${angleLeftKnee.toFixed(0)}°`, leftKnee.x, leftKnee.y);
          }
        }

        // Right Knee Angle
        const rightHip = pose.keypoints[12];
        const rightKnee = pose.keypoints[14];
        const rightAnkle = pose.keypoints[16];
        if (rightHip.score > 0.5 && rightKnee.score > 0.5 && rightAnkle.score > 0.5) {
          const angleRightKnee = calculateAngle(rightHip, rightKnee, rightAnkle);
          if (showRightKneeAngle) {
            ctx.fillText(` ${angleRightKnee.toFixed(0)}°`, rightKnee.x, rightKnee.y);
          }
        }

        // Left Hip Angle
        const leftShoulder = pose.keypoints[5];
        if (leftShoulder.score > 0.5 && leftHip.score > 0.5 && leftKnee.score > 0.5) {
          const angleLeftHip = calculateAngle(leftShoulder, leftHip, leftKnee);
          if (showLeftHipAngle) {
            ctx.fillText(` ${angleLeftHip.toFixed(0)}°`, leftHip.x, leftHip.y);
          }
        }

        // Right Hip Angle
        const rightShoulder = pose.keypoints[6];
        if (rightShoulder.score > 0.5 && rightHip.score > 0.5 && rightKnee.score > 0.5) {
          const angleRightHip = calculateAngle(rightShoulder, rightHip, rightKnee);
          if (showRightHipAngle) {
            ctx.fillText(` ${angleRightHip.toFixed(0)}°`, rightHip.x, rightHip.y);
          }
        }

        // Left Elbow Angle
        const leftElbow = pose.keypoints[7];
        const leftWrist = pose.keypoints[9];
        if (leftShoulder.score > 0.5 && leftElbow.score > 0.5 && leftWrist.score > 0.5) {
          const angleLeftElbow = calculateAngle(leftShoulder, leftElbow, leftWrist);
          if (showLeftElbowAngle) {
            ctx.fillText(` ${angleLeftElbow.toFixed(0)}°`, leftElbow.x, leftElbow.y);
          }
        }

        // Right Elbow Angle
        const rightElbow = pose.keypoints[8];
        const rightWrist = pose.keypoints[10];
        if (rightShoulder.score > 0.5 && rightElbow.score > 0.5 && rightWrist.score > 0.5) {
          const angleRightElbow = calculateAngle(rightShoulder, rightElbow, rightWrist);
          if (showRightElbowAngle) {
            ctx.fillText(` ${angleRightElbow.toFixed(0)}°`, rightElbow.x, rightElbow.y);
          }
        }

        // Left Shoulder Angle
        if (leftHip.score > 0.5 && leftShoulder.score > 0.5 && leftElbow.score > 0.5) {
          const angleLeftShoulder = calculateAngle(leftHip, leftShoulder, leftElbow);
          if (showLeftShoulderAngle) {
            ctx.fillText(` ${angleLeftShoulder.toFixed(0)}°`, leftShoulder.x, leftShoulder.y);
          }
        }

        // Right Shoulder Angle
        if (rightHip.score > 0.5 && rightShoulder.score > 0.5 && rightElbow.score > 0.5) {
          const angleRightShoulder = calculateAngle(rightHip, rightShoulder, rightElbow);
          if (showRightShoulderAngle) {
            ctx.fillText(` ${angleRightShoulder.toFixed(0)}°`, rightShoulder.x, rightShoulder.y);
          }
        }

        setLeftKneeAngle(angleLeftKnee);
        setRightKneeAngle(angleRightKnee);
        setLeftHipAngle(angleLeftHip);
        setRightHipAngle(angleRightHip);
        setLeftElbowAngle(angleLeftElbow);
        setRightElbowAngle(angleRightElbow);
        setLeftShoulderAngle(angleLeftShoulder);
        setRightShoulderAngle(angleRightShoulder);

        // Calculate squat status
        let isUserInSquat = angleLeftKnee <= 90 && angleRightKnee <= 90;
        if (isUserInSquat && !currentlyInSquat.current) {
          currentlyInSquat.current = true;
        } else if (!isUserInSquat && currentlyInSquat.current) {
          setSquatCount(prevCount => prevCount + 1);
          currentlyInSquat.current = false;
        }
      }
    });
  }
